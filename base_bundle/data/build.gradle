buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
    }
}

apply plugin: 'com.android.library'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply from: '../config/quality.gradle'


android {
    defaultPublishConfig "debug"

    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")
        versionCode globalConfiguration.getAt("androidVersionCode")
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage' // Some libraries have issues with this
        disable 'OldTargetApi' // Due to Robolectric that modifies the manifest when running tests
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/config/quality/lint/lint.xml")
        htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
    }

    buildTypes {
        debug {
            buildConfigField "String", "URL_API", '"http://www.example.es"'
            buildConfigField "String", "API_DIR_IMAGES", '"/dinamico/entradas/"'
        }

        release {
            buildConfigField "String", "URL_API", '"http://www.example.es"'
            buildConfigField "String", "API_DIR_IMAGES", '"/dinamico/entradas/"'
        }
    }
}

dependencies {
    def dataDependencies = rootProject.ext.dataDependencies
     def testDependencies = rootProject.ext.dataTestDependencies

    compile project(':domain')

    apt dataDependencies.daggerCompiler
    provided dataDependencies.javaxAnnotation
    compile dataDependencies.dagger
    compile dataDependencies.retrofit2
    compile dataDependencies.retrofit2Converter
    compile dataDependencies.retrofit2RxAdapter
    compile dataDependencies.gson
    compile dataDependencies.rxJava
    compile dataDependencies.rxAndroid
    compile dataDependencies.timber
    compile dataDependencies.supportAnnotations
    compile dataDependencies.okHttpLoggingInterceptor

    testCompile testDependencies.junit
    testCompile testDependencies.assertj
    testCompile testDependencies.mockito
    testCompile testDependencies.robolectric
    testCompile testDependencies.supportAnnotations
}
