buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
    }
}


apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'
apply from: '../config/quality.gradle'

android {
    def globalConfiguration = rootProject.extensions.getByName("ext")

    compileSdkVersion globalConfiguration.getAt("androidCompileSdkVersion")
    buildToolsVersion globalConfiguration.getAt("androidBuildToolsVersion")

    defaultConfig {
        minSdkVersion globalConfiguration.getAt("androidMinSdkVersion")
        targetSdkVersion globalConfiguration.getAt("androidTargetSdkVersion")

        applicationId globalConfiguration.getAt("androidApplicationId")
        versionCode globalConfiguration.getAt("androidVersionCode")
        versionName globalConfiguration.getAt("androidVersionName")
        testInstrumentationRunner globalConfiguration.getAt("testInstrumentationRunner")
        testApplicationId globalConfiguration.getAt("testApplicationId")

        generatedDensities = []
    }

    aaptOptions {
        additionalParameters "--no-version-vectors"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
    }

    lintOptions {
        quiet true
        abortOnError false
        ignoreWarnings true
        disable 'InvalidPackage' //Some libraries have issues with this.
        disable 'OldTargetApi' //Lint gives this warning but SDK 20 would be Android L Beta
        disable 'IconDensities' //For testing purpose. This is safe to remove.
        disable 'IconMissingDensityFolder' //For testing purpose. This is safe to remove.
        xmlReport false
        htmlReport true
        lintConfig file("${project.rootDir}/config/quality/lint/lint.xml")
        htmlOutput file("$project.buildDir/reports/lint/lint-result.html")
        xmlOutput file("$project.buildDir/reports/lint/lint-result.xml")
    }

    signingConfigs {
        debug {
            storeFile file('../config/buildsystem/debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }

    buildTypes {
        debug {
            versionNameSuffix '-dev'
            applicationIdSuffix '.dev'
            signingConfig signingConfigs.debug
        }
    }

     applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def newApkName
                //If there's no ZipAlign task it means that our artifact will be unaligned and we need to mark it as such.
                if (output.zipAlign) {
                    newApkName = appName + "-${variant.versionName}.apk"
                } else {
                    newApkName = appName + "-${variant.versionName}-unaligned.apk"
                }
                output.outputFile = new File(output.outputFile.parent, newApkName)
            }
        }
}

dependencies {
    def presentationDependencies = rootProject.ext.presentationDependencies
    def presentationTestDependencies = rootProject.ext.presentationTestDependencies

    compile project(':domain')
    compile project(':data')

    apt presentationDependencies.daggerCompiler
    apt presentationDependencies.butterKnifeCompiler
    compile presentationDependencies.butterKnife
    compile presentationDependencies.dagger
    compile presentationDependencies.supportRecyclerView
    compile presentationDependencies.supportCardView
    compile presentationDependencies.supportGridLayout
    compile presentationDependencies.supportDesign
    compile presentationDependencies.supportAppCompat
    compile presentationDependencies.dexter
    compile presentationDependencies.rxJava
    compile presentationDependencies.rxAndroid
    compile presentationDependencies.calligraphy
    compile presentationDependencies.timber
    compile presentationDependencies.glide
    compile presentationDependencies.icepick
    compile presentationDependencies.dexter
    provided presentationDependencies.icepickProcessor
    provided presentationDependencies.javaxAnnotation
    
    androidTestCompile presentationTestDependencies.mockito
    androidTestCompile presentationTestDependencies.dexmaker
    androidTestCompile presentationTestDependencies.dexmakerMockito
    androidTestCompile presentationTestDependencies.espresso
    androidTestCompile presentationTestDependencies.espressoIntents
    androidTestCompile presentationTestDependencies.testingRunner
    androidTestCompile presentationTestDependencies.testingRules
    androidTestCompile presentationTestDependencies.supportAnnotations
}