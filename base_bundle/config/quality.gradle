apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'

/*
 * Copyright 2015 Vincent Brison.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Add checkstyle, findbugs, pmd and lint to the check task.
check.dependsOn 'checkstyle', 'findbugs', 'pmd'

task checkstylesMain(type: Checkstyle) {
    ignoreFailures = true
    showViolations = false
    source 'src/main', 'src/release'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/main.xml"
    }
    classpath = files()
    configFile = file("${rootProject.rootDir}/config/quality/checkstyle/checkstyle.xml")
}

task checkstylesTest(type: Checkstyle) {
    ignoreFailures = true
    showViolations = false
    source 'src/androidTest'
    include '**/*.java'
    exclude '**/gen/**'
    exclude '**/R.java'
    exclude '**/BuildConfig.java'
    reports {
        xml.destination "$project.buildDir/reports/checkstyle/test.xml"
    }
    classpath = files()
    configFile = file("${rootProject.rootDir}/config/quality/checkstyle/checkstyle.xml")
}


task checkstyleReport << {
    checkType = project.ext.get("checkType")
    if (file("$buildDir/reports/checkstyle/${checkType}.xml").exists()) {
        ant.xslt(in: "$project.buildDir/reports/checkstyle/${checkType}.xml",
                style: "${rootProject.rootDir}/config/quality/checkstyle/checkstyle-noframes-sorted.xsl",
                out: "$project.buildDir/reports/checkstyle/checkstyle-${checkType}.html")
    }
}

task checkstyle(dependsOn: ['checkstylesMain', 'checkstylesTest']) {
    description 'Runs Checkstyle inspection against Android sourcesets.'
    group = 'Code Quality'
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        if (task.name in ['checkstylesMain', 'checkstylesTest']) {
            checkstyleReport {
                def matcher = task.name =~ /^checkstyles(.*)$/
                if (matcher.matches()) {
                    project.ext.set("checkType", matcher.group(1).toLowerCase())
                }
            }
            checkstyleReport.execute()
        }
    }
}

task findbugs(type: FindBugs, dependsOn: assembleDebug) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/config/quality/findbugs/findbugs-filter.xml")
    classes = files("${project.buildDir}/intermediates/classes")

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = false
        xml {
            destination "$project.buildDir/reports/findbugs/findbugs.xml"
        }
        html {
            destination "$project.buildDir/reports/findbugs/findbugs.html"
        }
    }

    classpath = files()
    group = 'Code Quality'
}

task pmd(type: Pmd) {
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/config/quality/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination "$project.buildDir/reports/pmd/pmd.xml"
        }
        html {
            destination "$project.buildDir/reports/pmd/pmd.html"
        }
    }
    group = 'Code Quality'
}


